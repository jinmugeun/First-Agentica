/**
 * @packageDocumentation
 * @module api.functional.report
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IAgenticaRpcListener, IAgenticaRpcService } from "@agentica/rpc";
import type { IConnection } from "@nestia/fetcher";
import type { Driver, WebSocketAcceptor } from "tgrid";
import { WebSocketConnector } from "tgrid";

export * as template from "./template";
export * as templates from "./templates";
export * as reports from "./reports";

/**
 * WebSocket endpoint for report generation
 *
 * @controller ReportController.generateReport
 * @path /report
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function generateReport(
  connection: IConnection<generateReport.Header>,
  provider: generateReport.Provider,
): Promise<generateReport.Output> {
  const connector: WebSocketConnector<
    generateReport.Header,
    generateReport.Provider,
    generateReport.Listener
  > = new WebSocketConnector(connection.headers ?? ({} as any), provider);
  await connector.connect(
    `${connection.host.endsWith("/") ? connection.host.substring(0, connection.host.length - 1) : connection.host}${generateReport.path()}`,
  );
  const driver: Driver<generateReport.Listener> = connector.getDriver();
  return {
    connector,
    driver,
  };
}
export namespace generateReport {
  export type Output = {
    connector: WebSocketConnector<Header, Provider, Listener>;
    driver: Driver<Listener>;
  };
  export type Header = undefined;
  export type Provider = IAgenticaRpcListener;
  export type Listener = IAgenticaRpcService<"chatgpt">;

  export const path = () => "/report";
}
