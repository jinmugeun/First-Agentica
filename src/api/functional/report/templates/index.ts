/**
 * @packageDocumentation
 * @module api.functional.report.templates
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IReport } from "../../../structures/report/IReport";

/**
 * Get all available templates
 * @controller ReportController.getTemplates
 * @path GET /report/templates
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getTemplates(
  connection: IConnection,
): Promise<getTemplates.Output> {
  return true === connection.simulate
    ? getTemplates.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getTemplates.METADATA,
        template: getTemplates.METADATA.path,
        path: getTemplates.path(),
      });
}
export namespace getTemplates {
  export type Output = Record<string, IReport.ITemplate>;

  export const METADATA = {
    method: "GET",
    path: "/report/templates",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/report/templates";
  export const random = (): Record<string, IReport.ITemplate> =>
    typia.random<Record<string, IReport.ITemplate>>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
