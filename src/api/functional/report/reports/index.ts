/**
 * @packageDocumentation
 * @module api.functional.report.reports
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IReport } from "../../../structures/report/IReport";

/**
 * Get report by ID
 * @controller ReportController.getReport
 * @path GET /report/reports/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getReport(
  connection: IConnection,
  id: string,
): Promise<getReport.Output> {
  return true === connection.simulate
    ? getReport.simulate(connection, id)
    : PlainFetcher.fetch(connection, {
        ...getReport.METADATA,
        template: getReport.METADATA.path,
        path: getReport.path(id),
      });
}
export namespace getReport {
  export type Output = IReport | null;

  export const METADATA = {
    method: "GET",
    path: "/report/reports/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/report/reports/${encodeURIComponent(id?.toString() ?? "null")}`;
  export const random = (): IReport | null => typia.random<IReport | null>();
  export const simulate = (connection: IConnection, id: string): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(id));
    return random();
  };
}

/**
 * Get all reports
 * @controller ReportController.getReports
 * @path GET /report/reports
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getReports(
  connection: IConnection,
): Promise<getReports.Output> {
  return true === connection.simulate
    ? getReports.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getReports.METADATA,
        template: getReports.METADATA.path,
        path: getReports.path(),
      });
}
export namespace getReports {
  export type Output = IReport[];

  export const METADATA = {
    method: "GET",
    path: "/report/reports",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/report/reports";
  export const random = (): IReport[] => typia.random<IReport[]>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
